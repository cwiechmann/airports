{
	"info": {
		"_postman_id": "c092bd88-3e78-4b50-aded-7c41671e374a",
		"name": "AirportsAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Airports for Frankfurt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application json\", function(){\r",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"A maximum of 1 airport is allowed to return\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"\r",
							"// carpark ID test\r",
							"pm.test(\"Frankfort Airport should be returned with id 2212\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    //console.log(jsonData);\r",
							"    console.log(jsonData[0].id);\r",
							"    //console.log(jsonData.Results());\r",
							"    pm.expect(jsonData[0].id).to.eql(2212);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							"const tokenUrl = 'https://' + pm.environment.get(\"authz_host\") + '/api/oauth/token';\r",
							"\r",
							"const clientId = pm.environment.get(\"client_id_private\");\r",
							"const clientSecret = pm.environment.get(\"client_secret_private\");\r",
							"\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"      url:  tokenUrl, \r",
							"      method: 'POST',\r",
							"      header: {\r",
							"        'Accept': 'application/json',\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"      },\r",
							"      body: {\r",
							"          mode: 'urlencoded',\r",
							"          urlencoded: [\r",
							"            { key: 'grant_type', value: 'client_credentials'},\r",
							"            { key: 'client_id', value: clientId },\r",
							"            { key: 'client_secret', value: clientSecret },\r",
							"            { key: 'scope', value: 'resource.WRITE resource.READ'}\r",
							"        ]\r",
							"      }\r",
							"  }, function (err, response) {\r",
							"        const jsonResponse = response.json();\r",
							"        const newAccessToken = jsonResponse.access_token;\r",
							"        console.log(response.json());\r",
							"        pm.variables.set('access_token', newAccessToken);\r",
							"  });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://{{host}}/api/v1/airports/FRA",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"airports",
						"FRA"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Airports with public app",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code is 403\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							"const tokenUrl = 'https://' + pm.environment.get(\"authz_host\") + '/api/oauth/token';\r",
							"\r",
							"const clientId = pm.environment.get(\"client_id_public\");\r",
							"const clientSecret = pm.environment.get(\"client_secret_public\");\r",
							"\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"      url:  tokenUrl, \r",
							"      method: 'POST',\r",
							"      header: {\r",
							"        'Accept': 'application/json',\r",
							"        'Content-Type': 'application/x-www-form-urlencoded'\r",
							"      },\r",
							"      body: {\r",
							"          mode: 'urlencoded',\r",
							"          urlencoded: [\r",
							"            { key: 'grant_type', value: 'client_credentials'},\r",
							"            { key: 'client_id', value: clientId },\r",
							"            { key: 'client_secret', value: clientSecret },\r",
							"            { key: 'scope', value: 'resource.WRITE resource.READ'}\r",
							"        ]\r",
							"      }\r",
							"  }, function (err, response) {\r",
							"        const jsonResponse = response.json();\r",
							"        const newAccessToken = jsonResponse.access_token;\r",
							"        console.log(response.json());\r",
							"        pm.variables.set('access_token', newAccessToken);\r",
							"  });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://{{host}}/api/v1/airports/FRA",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"airports",
						"FRA"
					]
				}
			},
			"response": []
		}
	]
}